Driver Up date Program Workflow
==============================
Partner side:
  Create BZ:
    Component: Driver Update Disk
    Content filled templates:
      6.x https://bugzilla.redhat.com/show_bug.cgi?id=681975
      7.x https://bugzilla.redhat.com/show_bug.cgi?id=1090185

NOTE: This BZ created by partner is only for communication with partner.
      BZ don't have any flags.
      When DUP request is resolved, this BZ will be closed MANUALLY by engineer
      like CURRENT RELEASE and in fixed field will be RPM name.
NOTE2: For request is significant
       1) PCI or USB ID for requested hardware.
       2) Hardware support in Y-stream kernel
       If these will be ok, engineer can start with next steps

Engineer side:
  This part can by done by two ways:
  Old with kernel "in-tree" scripts
  New with ddiskit

Old way (DEPRECATED):
  Create testing DUD:
    1) Clone RHEL kernel
         EL6: git://git.app.eng.bos.redhat.com/rhel6.git
         EL7: git://git.app.eng.bos.redhat.com/rhel7.git
    2) Update redhat/dup directory content
       NOTE: in-tree code is deprecated and DON'T USE IT!
       Right version currently have only poros!
    3) Edit redhat/dup/Makefile.sources file:
       Example:
         # bnx2x
         DUP_SOURCE_bnx2x= \
         drivers/net/ethernet/broadcom/bnx2x/* \
         drivers/net/ethernet/broadcom/cnic_if.h
         DUP_VERSION_bnx2x="1.712.30"
         DUP_FIRMWARE_bnx2x= \
         firmware/bnx2x-e1-7.13.1.0.fw
         DUP_FIRMWARE_VERSION_bnx2x="7.13.1"
    4) Update target kernel version:
       This step is different for EL6/EL7
         EL6: Update redhat/dup/Makefile
           First line contain this:
             BUILD_TAG=2.6.32-573.el6
           Update build tag for right target version.
           WARNING: Please, use only rhel6 GA versions.
                    DON'T USE Z-stream versions!
         EL7: Boot into target kernel
           el7 script using build tag uname -r
           WARNING: Please, use only rhel7 GA versions.
                    DON'T USE Z-stream versions!
    5) Replace text in kmodtool:
         "%description   -n kmod-${kmod_name}${dashvariant}
         This package provides the ${kmod_name} kernel modules built for
         the Linux kernel ${verrel}${dotvariant} for the %{_target_cpu}
         family of processors." 
          ->
         "This RPM has been provided by Red Hat for testing purposes only and is
          NOT supported for any other use. This RPM should NOT be deployed for
          purposes other than testing and debugging."
    6) Create backport patch
       For example, when making backport for bnx2x from
       2.6.32-600.el6 to 2.6.32-573.el6 you will create patch
       diff 2.6.32-573.el6 2.6.32-600.el6
       When you have final patch copy it into redhat/dup/patches/
       Patch name should be driver_name.patch

    7) Update symvers and greylist
       make -f redhat/dup/Makefile DUP_DRIVER=bnx2x update-symvers
       make -f redhat/dup/Makefile DUP_DRIVER=bnx2x update-greylist

    8) Build RPM
       make -f redhat/dup/Makefile DUP_DRIVER=bnx2x rpm

    9) Build RPM with signed *.ko
       Get SRPM from redhat/dup/tmp/copy
       Build it in brew:
       brew build --scratch rhel-7.3-z-dup-candidate bnx2x.el7.src.rpm
       NOTE: This step is required, because in brew we have sign *.ko feature
       Sign feature is available only in special build targets called:
       rhel-x.y-z-dup-candidate

    10) Build ISO
        Download RPMs/SRPMs from step9
        Use create_disk.sh script:
        create_disk.sh *.rpm
        NOTE: output ISO naming convention:
        dd-driver_name-version.elx.iso for testing ISO

    11) Provide ISO over people.redhat.com and fill this into bz:
        ---------------------------------------------------------
        We have a DUP package ready for you to test. You can download the package here:

        ISO: link to ISO

        Please give it a try and let us know if it works properly for you.

        -Petr
        ---------------------------------------------------------

    12) Wait for partner testing and do necessary steps for release:
        Request dist-git repo called: drivername with branch rhel-x.y
        Request Z-stream clone
        NOTE: Z-stream clone is clone from original Y-stream request NOT DUP request
              This part of work will by done by gcase

  Create and release Final RPMs/DUD:
    1) Download SRPM from step 9
    2) Unpack it:
       rpm -uvh driver.src.rpm
    3) revert step 5 (replace kmodtool text)
    4) Update SPEC/driver.spec
       There need add this string into changelog:
       - Resolves: #bz000000
       BZ is Z-stream number
    4) Rebuild SRPM
       rpmbuild SPEC/driver.spec
    5) Import SRPM into dist-git
         rhpkg import driver.src.rpm
         git commit -a -s
         rhpkg push
         rhpkg build --traget=rhel-7.3-z-dup-candidate
    6) Create errata
    7) Wait for RPM signatures
    8) Download signed RPMs/SRPMs
       NOTE: here is signed RPM/SRPM! This is not *.ko signature from brew
    9) Build release ISO
         Use create_disk.sh script:
         create_disk.sh *.rpm
         NOTE: output ISO naming convention:
         dd-driver_name-version.elx_y.iso for release ISO
    10) provide ISO over people.redhat.com

  Cleanup:
    1) Change errata state from NEW_FILES into ON_QA
    2) Change DUP request state into CLOSED -> CURRENT RELEASE
       NOTE: This step do after DUP release (errata in SHIP_LIVE) 

New way:
  Use tool called ddiskit:
  1) Install python-ddiskit RPM package
      * It is available in
        https://copr.fedorainfracloud.org/coprs/ersin/ddiskit/
        which can be enabled using this command:
        $ yum copr enable ersin/ddiskit

  Create testing DUD:
    1) Clone rhel kernel
         EL6: git://git.app.eng.bos.redhat.com/rhel6.git
         EL7: git://git.app.eng.bos.redhat.com/rhel7.git
    2) Create backport patch
       For example, when making backport for bnx2x from
       2.6.32-600.el6 to 2.6.32-573.el6 you will create patch
       diff 2.6.32-573.el6 2.6.32-600.el6
    3) $ ddiskit prepare_sources
       Command will prepare directory structure
       .
       |-- module.config
       |-- rpm
       |   |-- BUILD
       |   |-- BUILDROOT
       |   |-- RPMS
       |   |-- SOURCES
       |   |-- SPECS
       |   `-- SRPMS
       `-- src
           |-- firmware
           `-- patches
    4) Copy source code into src
       Copy patches from step 2 into src/patches
        NOTE: respect kernel directory structure inside new src dir!
        Example: $ mkdir -p src/drivers/net/ethernet/broadcom
                 $ cd rhel6
                 $ cp -r drivers/net/ethernet/broadcom/bnx2x \
                      ../src/drivers/net/ethernet/broadcom/
       Copy firmware files into src/firmware
    5) Update necessary fields into module.config
        * global.module_vendor is used as a part of RPM name. For RPMs packaged
          by Red Hat, put "redhat" there.
        * global.module_author and global.module_author_email also refer to
          packager, so it makes sense to put your name and e-mail here.
        * spec_file.module_version usually refers to internal kernel module
          version (grep -R MODULE_VERSION src)
        * spec_file.module_rpm_release usually starts at 1.
        * spec_file.rpm_dist is for identifying distribution suffix
          (like "el7_3"), but for now it is only used for automatic ISO file
          name generation and may be deprecated in the future.
        * spec_file.module_build_dir is a path to the directory containing
          module source files.
            Example: In the bnx2x example, it should be
                     src/drivers/net/ethernet/broadcom/bnx2x
        * spec_file.kernel_version indicates kernel package version against
          which it should be built. Usually it is branch GA kernel, like
          2.6.32-573.el6 or 3.10.0-514.el7 (not Z-stream kernel, like
          3.10.0-514.6.1.el7)
        * spec_file.git_hash should refer to git commit ID which is used as
          a source for the source code used in the DUP.
            Example: In the bnx2x example, this command will produce the git
                     commit ID:
                     $ cd rhel6
                     $ git rev-parse HEAD
    6) $ ddiskit generate_spec
    7) $ ddiskit build_rpm
    8) Build RPM with signed *.ko
       Get SRPM from rpm/SRPMS
       Build it in brew:
       brew build --scratch rhel-7.3-z-dup-candidate bnx2x.el7.src.rpm
       NOTE: This step is required, because in brew we have sign *.ko feature
       Sign feature is available only in special build targets called:
       rhel-x.y-z-dup-candidate

    9) Build ISO
       Download RPMs/SRPMs from step8
       $ ddiskit build_iso rpm_directory
       NOTE: output ISO naming convention:
       dd-driver_name-version.elx.iso for testing ISO

    10) Provide ISO over people.redhat.com
        * In case you can't access people.redhat.com via ssh, you are probably
          not added to the appropriate access group, please file request at
          help.redhat.com, with short description like "Create people.redhat.com
          account" and content like "I need a people.redhat.com account."
        * In the home directory, create "public_html" directory, its contents
          would be accessible via https://people.redhat.com/<username>/, and put
          some index.html there, in order to prevent directory index to be
          viewable.
        * It is recommended that path to ISO have been obscured somehow, for
          example, put ISO into a directory with name which is derived from the
          result of ISO file hash value.
        * Do not forget change ISO access rights so it would be accessible.
    11) Add a comment to a partner DUP request BZ:
        ---------------------------------------------------------
        We have a DUP package ready for you to test. You can download the package here:

        ISO: link to ISO

        Please give it a try and let us know if it works properly for you.

        -Petr
        ---------------------------------------------------------

    12) Wait for partner testing and do necessary steps for release:
        Request dist-git repo called: drivername with branch rhel-x.y
        Request Z-stream clone
        NOTE: Z-stream clone is clone from original Y-stream request NOT DUP request
              This part of work will by done by gcase

  Create and release Final RPMs/DUD:
    1) Download SRPM from step 8
    2) Update rpm/SPECS/driver.spec
       There need add this string into changelog:
       - Resolves: #bz000000
       BZ is Z-stream number
    3) Rebuild SRPM
       rpmbuild SPEC/driver.spec
    4) Import SRPM into dist-git
         rhpkg import driver.src.rpm
         git commit -a -s
         rhpkg push
         rhpkg build --traget=rhel-7.3-z-dup-candidate
    5) Create errata
    6) Wait for RPM signatures
    7) Download signed RPMs/SRPMs
       NOTE: here is signed RPM/SRPM! This is not *.ko signature from brew
    8) Build release ISO
         Use create_disk.sh script:
         create_disk.sh *.rpm
         NOTE: output ISO naming convention:
         dd-driver_name-version.elx_y.iso for release ISO
    9) provide ISO over people.redhat.com

  Cleanup:
    1) Change errata state from NEW_FILES into ON_QA
    2) Change DUP request state into CLOSED -> CURRENT RELEASE
       NOTE: This step do after DUP release (errata in SHIP_LIVE)
