Driver Up date Program Workflow
==============================
Partner side:
  Create BZ:
    Component: Driver Update Disk
    Content filled templates:
      6.x https://bugzilla.redhat.com/show_bug.cgi?id=681975
      7.x https://bugzilla.redhat.com/show_bug.cgi?id=1090185

NOTE: This BZ created by partner is only for communication with partner.
      BZ don't have any flags.
      When DUP request is resolved, this BZ will be closed MANUALLY by engineer
      like CURRENT RELEASE and in fixed field will be RPM name.
NOTE2: For request it is significant to have:
       1) PCI or USB ID for requested hardware.
       2) Hardware support is in Y-stream kernel.
       If these will be OK, engineer can start with the next steps

Engineer side:
  This part can by done in two ways:
  Old with kernel "in-tree" scripts
  New with ddiskit

Old way (DEPRECATED):
  Create testing DUD:
    1) Clone RHEL kernel
         EL6: git://git.app.eng.bos.redhat.com/rhel6.git
         EL7: git://git.app.eng.bos.redhat.com/rhel7.git
    2) Update redhat/dup directory content
       NOTE: in-tree code is deprecated and DON'T USE IT!
       Only poros currently has the right version!
    3) Edit redhat/dup/Makefile.sources file:
       Example:
         # bnx2x
         DUP_SOURCE_bnx2x= \
         drivers/net/ethernet/broadcom/bnx2x/* \
         drivers/net/ethernet/broadcom/cnic_if.h
         DUP_VERSION_bnx2x="1.712.30"
         DUP_FIRMWARE_bnx2x= \
         firmware/bnx2x-e1-7.13.1.0.fw
         DUP_FIRMWARE_VERSION_bnx2x="7.13.1"
    4) Update target kernel version:
       This step is different for EL6/EL7
         EL6: Update redhat/dup/Makefile
           First line contain this:
             BUILD_TAG=2.6.32-573.el6
           Update build tag for right target version.
           WARNING: Please, use only rhel6 GA versions.
                    DON'T USE Z-stream versions!
         EL7: Boot into target kernel
           el7 script using build tag uname -r
           WARNING: Please, use only rhel7 GA versions.
                    DON'T USE Z-stream versions!
    5) Replace text in kmodtool:
         "%description   -n kmod-${kmod_name}${dashvariant}
         This package provides the ${kmod_name} kernel modules built for
         the Linux kernel ${verrel}${dotvariant} for the %{_target_cpu}
         family of processors." 
          ->
         "This RPM has been provided by Red Hat for testing purposes only and is
          NOT supported for any other use. This RPM should NOT be deployed for
          purposes other than testing and debugging."
    6) Create backport patch
       For example, when making backport for bnx2x from
       2.6.32-600.el6 to 2.6.32-573.el6 you will create patch
       diff 2.6.32-573.el6 2.6.32-600.el6
       When you have final patch copy it into redhat/dup/patches/
       Patch name should be driver_name.patch

    7) Update symvers and greylist
       make -f redhat/dup/Makefile DUP_DRIVER=bnx2x update-symvers
       make -f redhat/dup/Makefile DUP_DRIVER=bnx2x update-greylist

    8) Build RPM
       make -f redhat/dup/Makefile DUP_DRIVER=bnx2x rpm

    9) Build RPM with signed *.ko
       Get SRPM from redhat/dup/tmp/copy
       Build it in brew:
       brew build --scratch rhel-7.3-z-dup-candidate bnx2x.el7.src.rpm
       NOTE: This step is required, because in brew we have sign *.ko feature
       Sign feature is available only in special build targets called:
       rhel-x.y-z-dup-candidate

    10) Build ISO
        Download RPMs/SRPMs from step9
        Use create_disk.sh script:
        create_disk.sh *.rpm
        NOTE: output ISO naming convention:
        dd-<vendor>-<driver_name>-<version>.el<x>.iso for testing ISO

    11) Provide ISO over people.redhat.com and fill this into bz:
        ---------------------------------------------------------
        We have a DUP package ready for you to test. You can download the package here:

        ISO: link to ISO

        Please give it a try and let us know if it works properly for you.

        -Petr
        ---------------------------------------------------------

    12) Wait for partner testing and do necessary steps for release:
        Request dist-git repo called: <driver_name> with branch rhel-<x>.<y>
        Request Z-stream clone
        NOTE: Z-stream clone is clone from original Y-stream request NOT DUP request
              This part of work is done by gcase, DUP lead

  Create and release Final RPMs/DUD:
    1) Download SRPM from step 9
    2) Unpack it:
       rpm -uvh driver.src.rpm
    3) revert step 5 (replace kmodtool text)
    4) Update SPEC/driver.spec
       This string should be added to the changelog:
       - Resolves: #bz000000
       BZ is Z-stream number
    4) Rebuild SRPM
       rpmbuild SPEC/driver.spec
    5) Import SRPM into dist-git
         rhpkg import driver.src.rpm
         git commit -a -s -m "<driver_name> DUP module for RHEL-7.3.z"
         rhpkg push
         rhpkg build --traget=rhel-7.3-z-dup-candidate
    6) Create an errata
    7) Wait for RPM signatures
    8) Download signed RPMs/SRPMs
       NOTE: here are signed RPM/SRPM! This is different from *.ko signature
             from brew (which is also present)
    9) Build release ISO
         Use create_disk.sh script:
         create_disk.sh *.rpm
         NOTE: output ISO naming convention:
         dd-<vendor>-<driver_name>-<version>.el<x>_<y>.iso for release ISO
    10) provide ISO over people.redhat.com

  Cleanup:
    1) Change errata state from NEW_FILES into ON_QA
    2) Change DUP request state into CLOSED -> CURRENT RELEASE
       NOTE: This step do after DUP release (errata is in SHIP_LIVE state)

New way:
  Use the tool called ddiskit:
  1) Install python-ddiskit RPM package
      * It is available in
        https://copr.fedorainfracloud.org/coprs/ersin/ddiskit/
        which can be enabled using this command:
        $ yum copr enable ersin/ddiskit

  Create testing DUD:
    1) Clone rhel kernel
         EL6: git://git.app.eng.bos.redhat.com/rhel6.git
         EL7: git://git.app.eng.bos.redhat.com/rhel7.git
    2) Create backport patch (if needed)
       For example, when making backport for bnx2x from
       2.6.32-600.el6 to 2.6.32-573.el6 you will create patch
       diff 2.6.32-573.el6 2.6.32-600.el6
    3) $ ddiskit prepare_sources
       Command will prepare directory structure
       .
       |-- module.config
       |-- rpm
       |   |-- BUILD
       |   |-- BUILDROOT
       |   |-- RPMS
       |   |-- SOURCES
       |   |-- SPECS
       |   `-- SRPMS
       `-- src
           |-- firmware
           `-- patches
    4) Copy source code into src directory
       Copy patches from step 2 into src/patches
        NOTE: respect kernel directory structure inside new src dir!
        Example: $ mkdir -p src/drivers/net/ethernet/broadcom
                 $ cd rhel6
                 $ cp -r drivers/net/ethernet/broadcom/bnx2x \
                      ../src/drivers/net/ethernet/broadcom/
       Copy firmware files into src/firmware
    5) Update necessary fields into module.config
        * global.module_vendor is used as a part of RPM name. For RPMs packaged
          by Red Hat, put "redhat" there.
        * global.module_author and global.module_author_email also refer to
          packager, so it makes sense to put your name and e-mail here.
        * spec_file.module_version usually refers to internal kernel module
          version (grep -R MODULE_VERSION src)
        * spec_file.module_rpm_release usually starts at 1.
        * spec_file.rpm_dist is for identifying distribution suffix
          (like "el7_3"), but for now it is only used for automatic ISO file
          name generation and may be deprecated in the future.
        * spec_file.module_build_dir is a path to the directory containing
          module source files.
            Example: In the bnx2x example, it should be
                     src/drivers/net/ethernet/broadcom/bnx2x
        * spec_file.kernel_version indicates kernel package version against
          which it should be built. Usually it is branch GA kernel, like
          2.6.32-573.el6 or 3.10.0-514.el7 (not Z-stream kernel, like
          3.10.0-514.6.1.el7)
        * spec_file.git_hash should refer to git commit ID which is used as
          a source for the source code used in the DUP.
            Example: In the bnx2x example, this command will produce the git
                     commit ID:
                     $ cd rhel6
                     $ git rev-parse HEAD
    6) $ ddiskit generate_spec
    7) $ ddiskit build_rpm
    8) Build RPM with signed *.ko
       Get SRPM from rpm/SRPMS
       Build it in brew:
       brew build --scratch rhel-7.3-z-dup-candidate bnx2x.el7.src.rpm
       NOTE: This step is required, because in brew we have sign *.ko feature
       Sign feature is available only in special build targets called
       rhel-<x>.<y>-z-dup-candidate

    9) Build ISO
       Download RPMs/SRPMs from step 8 into some directory
       $ ddiskit build_iso -i dd-<vendor>-<driver_name>-<version>.el<x>.iso <rpm_directory>
       NOTE: output ISO naming convention:
       dd-<vendor>-<driver_name>-<version>.el<x>.iso for testing ISO

    10) Provide ISO over people.redhat.com
        * In case you can't access people.redhat.com via ssh, you are probably
          not added to the appropriate access group, please file request at
          help.redhat.com, with short description like "Create people.redhat.com
          account" and content like "I need a people.redhat.com account."
        * In the home directory, create "public_html" directory, its contents
          would be accessible via https://people.redhat.com/<username>/, and put
          some index.html there, in order to prevent directory index to be
          viewable.
        * It is recommended that path to ISO have been obscured somehow, for
          example, put ISO into a directory with name which is derived from the
          result of ISO file hash value.
        * Do not forget change ISO access rights so it would be accessible.
    11) Add a comment to a partner DUP request BZ:
        ---------------------------------------------------------
        We have a DUP package ready for you to test. You can download the package here:

        ISO: link to ISO

        Please give it a try and let us know if it works properly for you.

        -Petr
        ---------------------------------------------------------

    12) Wait for partner to perform testing and do necessary steps for release:
        Request Z-stream clone
        NOTE: Z-stream clone is clone from original Y-stream request NOT DUP request
              This part of work is done by gcase, DUP lead

        Request dist-git repo called <driver_name> with branch rhel-<x>.<y> by
        creating a new ticket in RCM Jira (https://projects.engineering.redhat.com/):
          * Project: "RCM"
          * Component: "RHEL 7"
            RHEL release)
          * Summary: "rhel-7.3 branch for <driver_name>"
          * Description:
              Can I ask you to create rhel-7.3 branch in <driver_name> dist-git
              repository? It is needed for the <driver_name> DUP package.

              BZ: https://bugzilla.redhat.com/show_bug.cgi?id=<Z-stream bug ID>

  Create and release Final RPMs/DUD:
    1) Download SRPM from step 8
    2) Update rpm/SPECS/driver.spec
       There need add this string into changelog:
       - Resolves: #bz000000
       BZ is Z-stream number
    3) Rebuild SRPM
         ddiskit build_rpm -s
    4) Import SRPM into dist-git
         rhpkg import <driver_name>.src.rpm
         git commit -a -s -m "<driver_name> DUP module for RHEL-7.3.z"
         rhpkg push
    5) Request addition of package to the build tag. This could be done by
       creating a new ticket in RCM Jira
       (https://projects.engineering.redhat.com/):
          * Project: "RCM"
          * Component: "RHEL 7"
          * Summary: "Add package <driver_name> to rhel-7.3 base tag"
          * Description:
              Can I ask you to add package <driver_name> to rhel-7.3-z base tag,
              in order to be able to build it with

                  rhpkg build --target rhel-7.3-z-dup-candidate

              command? It is needed for the <driver_name> DUP package. Thanks.

              BZ: https://bugzilla.redhat.com/show_bug.cgi?id=<Z-stream bug ID>
       Note that in case this step is skipped, the next step would fail with the
       following error:

           FAILED: BuildError: package kmod-<vendor>-<driver_name> not in list for
           tag rhel-7.3-z-candidate

       In case it has happened, it probably makes sense to provide also link
       to the failed task.
    6) Once it is done, package can be built:
         rhpkg build --target=rhel-7.3-z-dup-candidate
    7) Update Z-stream bug state to MODIFIED
    8) Create errata (https://errata.devel.redhat.com/advisory/new)
        * You can use "Clone advisory" there and supply advisory number for
          an existing DUP errata, like RHEA-2016:1930-02
        * Product: Red Hat Enterprise Linux
        * Release: RHEL-<x>.<y>.z
        * Type: Red Hat Enhancement Advisory
        * Embargo Date: None:
        * Release Date: Default
        * Package Maintainer: <your e-mail, probably the same as in
          global.module_author_email in module.config>
        * Manager Contact: lwang@redhat.com
        * QA Owner: qa-errata-list@redhat.com
        * Synopsis: new packages: kmod-<vendor>-<driver_name>
        * Topic:
            New kmod-<vendor>-<driver_name> package is now available for Red Hat
            Enterprise Linux 7.
        * Bugs or JIRA Issues Fixed: <Z-stream bug ID>
        * Problem Description:
            The kmod-<vendor>-<driver_name> package contains the <device product name>
            Device Driver kernel module, which adds official support for the new
            <device_name> devices, specifically:
              <List of device product names>

            The PCI IDs supported by this package are:
              <List of PCI VID:DID, one per line>

            The kernel modules delivered by this erratum have been made available as
            part of the Red Hat Driver Update Program, which provides updated kernel
            modules that add support for selected devices in advance of the next Red
            Hat Enterprise Linux minor update release. We strongly recommend that
            these kernel modules be only used when it is necessary to enable the
            specific hardware mentioned in this erratum. Partners and customers
            should continue to use the driver that is shipped in the latest Red Hat
            Enterprise Linux kernel for all other devices that require this driver.
            (BZ#<Z-stream bug ID>)

            All users who require kmod-<vendor>-<driver_name> are advised to install
            this new package.
    9) Add brew build ID (not task ID!) to errata
        * Obtain build ID by opening brew task (task URL displayed by rhpkg
          build on step 6), click on the link in "Build" row, copy the value in
          the ID row — this is the brew build ID.
        * On the errata summary page, click "Edit builds" button in the
          "Add/Update Brew builds" row
        * Paste obtained bew build ID into the text area.
        * Click "Find new builds"
        * You will get warning "Could not get product listings for the following
          Brew builds", this would be handled in the next step.
        * Click "Save Builds".
    10) Request product listing. This could be done by creating a new ticket in
        RCM Jira (https://projects.engineering.redhat.com/):
          * Project: "RCM"
          * Component: "RHEL 7"
          * Summary: "Product Listing for the <driver_name> DUP"
          * Description:
              Can you please provide a product listing for the <driver_name>
              7.3.z DUP? Thanks.

              Errata: https://errata.devel.redhat.com/advisory/<errata ID>
         * Product Affects Version: rhel-7.3
    11) Meanwhile, waive RPMDiff Pathnames check (which informs that kernel
        modules install in /lib and not in /usr/lib), there shouldn't be any
        other RPMDiff issues. You can provide the following comment for the
        approval: "This is ok because we do deliver kernel module files under
        /lib for now."
    12) When product listing is obtained, change errata state from NEW_FILES to
        ON_QA
    13) Wait for RPM signatures
    14) Download signed RPMs/SRPMs
        There is no direct way pointing straight at the signed RPMs. On the
        https://errata.devel.redhat.com/advisory/<advisory ID>/builds page there
        are some paths, and by replacing /mnt/redhat prefix with
        https://download-node-02.eng.bos.redhat.com/ there, one can get URL for
        downloading signed RPMs.

        NOTE: here are signed RPM/SRPM! This is different from *.ko signature
              from brew (which is also present).
    15) Build release ISO
         $ ddiskit build_iso <rpm_directory>
         NOTE: output ISO naming convention (should be automatically generated
         by ddiskit):
         dd-<vendor>-<driver_name>-<version>.el<x>_<y>.iso for release ISO
    16) Put ISO to people.redhat.com
        * Do not forget change ISO access rights so it would be accessible.
    17) Provide URL to it to QE team via (options are in best-to-worst order):
        * #dup IRC channel
        * e-mail
        * private Bugzilla comment.

  Cleanup:
    2) Change DUP request state into CLOSED -> CURRENT RELEASE
       NOTE: This step do after DUP release (errata in SHIP_LIVE state)
